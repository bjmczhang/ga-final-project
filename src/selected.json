[{"id":3,"title":"Using AI to generate poetry","author":"No Author Given","date":"25-07-2023","content":"\nI was recently granted access to the [OpenAI GPT-3 Beta](https://beta.openai.com/), a very powerful language model that can be used to do all sorts of magic like chat bot generation, article summary, and a [lot more cool stuff](https://beta.openai.com/examples).\n\nBut the application that really excited me was creative writing (stuff like SEO generation is cool and all, but a also a bit dry for my taste).\n\nI had previously seen [AI Dungeon](https://play.aidungeon.io/) use GPT to create an interactive text adventure game (try it, it's fun!) and that got me curious about what else the AI was capable of ‚Äî especially when elements of both _creativity_ and _structure_ were involved.\n\nI decided to test it against poetry and story generation, and this is the resulting write-up of those experiments.\n\n## What is GPT-3?\n\n[GPT-3](https://arxiv.org/abs/2005.14165) is a language model developed by [OpenAI](https://beta.openai.com/). To the average developer (like me), it's basically a magical black-box that is extremely powerful at natural language use-cases.\n\nIt was trained on an estimated **45 TB** of text data (pretty much anything that is publicly available on the internet)!\n\nWe can literally ask it to do anything. For example, if I ask for steps to bake a cake it gives me:\n\n```\n1. Preheat oven to 350¬∞F.\n2. Grease and flour a 9-inch round cake pan.\n3. Stir cake mix, oil, eggs, and water in a large bowl with a spoon until blended.\n4. Pour batter into prepared pan.\n```\n\nAlternatively, I can provide it with an example of what I want. Such as:\n\n```\n[15 mins] Walk or jog lightlyy to warm up.\n[10 mins] 3 sets of Squats\n```\n\nAnd it will understand that we're writing a work-out routine, and continue in that style ‚Äî responding with something like this:\n\n```\n[10 mins] 3 sets of Push ups (use the bench/steps if you can't do regular ones)\n[10 mins] 3 sets of Lunges\n[10 mins] 3 sets of Sit ups\n[10 mins] 3 sets of Tricep dips\n[10 mins] 3 sets of\n```\n\nIt can also do some pretty zany stuff, like translating from English to emoji.\n\n```\nI love pizza and beer.\nüòÄ‚ù§Ô∏èüçïüç∫\n\nI flew to Japan and ate some Sushi.\n‚úàÔ∏èüáØüáµüòã üç£\n\nI was snowboarding in France.\nüèÇ‚ùÑÔ∏èüá´üá∑\n```\n\nSo as you can see, there's just endless amount of ways you can interact with the AI.\n\nIt's up to us to experiment with it and see how it can be useful for any particular problem. Let's give it a go!\n\n## üí° Method\n\nToday, I want to see if this AI is able to understand and generate poetry. Why poetry? Because I think it's a relatively simple example, and has three distinct dimensions that we can easily assess it on:\n\n- Tone\n- Content\n- Structure\n\nOpenAI lets customers interact with GPT-3 via an API, so that's how I'll be using it as well.\n\nI'll be providing both direct requests and examples (with increasing complexity), and let the AI come up with **20 responses** for each prompt.\n\nAdditionally, for my example prompts, I'll avoid using existing text‚Äîthe AI may have already seen it in the training data and that might skew the results.\n\nI'll then talk about the best samples in each batch and anything I find interesting about them.\n\nAlso I've pushed the [full set of results on GitHub](https://github.com/pixegami/gpt-3-poetry-results) if you wanted to check out the rest of the samples.\n\n## üß™ Results\n\n### ‚úç Short poem\n\nAs a baseline, I want to know how much the AI understands about the tone, structure and content of a 'poem.'\n\n```\n[Prompt]\nWrite a short poem.\n\n[Sample AI Response]\nSnow is falling,\n\nsilently,\n\nthe ground a white blanket.\nHeroes dream in peace,\nwhere they sleep.\n```\n\nIt's a pretty good start! It's structured but it doesn't rhyme. The language and story also have a 'poetic' feel to it. Not bad.\n\nAmongst the other 20 samples were also hilarious rubbish like this one ü§° :\n\n```\n[Sample AI Response]\nLife is like a beach\nWhere we take our coconut and whack it\nor chew on it\n\nThere are also other beaches\nWhere we can drink some sand and ruminate\n```\n\nNot quite hitting the mark, but still pretty interesting.\n\n### ‚úç Short poem with theme\n\nNext, I wanted to extend the prompt with some theme, just to see how it is able to assimilate that into its response.\n\nI picked a theme that isn't typically associated with poetry: **Space Exploration** (also because I've been watching a lot of old-school sci-fi stuff recently).\n\n```\n[Prompt]\nWrite a short poem about space exploration.\n\n[Sample AI Response]\nI hope the stars align\nFor I dream and explore\nBeyond what we see,\nWith the most amazing views\n```\n\nIt's definitely found a way to put the space theme in there ‚Äî not too unnaturally either, because it still links it to 'emotional' concepts like 'dream', 'hope' and 'explore.'\n\n### ‚úç Short poem with 2x themes\n\nNow I know it can handle one theme, let's add another one to the mix and see what happens. Something _not_ commonly associated with either poetry nor space (we want to challenge the AI right?) ‚Äî how about...\n\n```\n[Prompt]\nWrite a short poem about space exploration and parkour.\n\n[Sample AI Response]\nTaking the stars and reaching for the moon\nAfraid to look down\nShe jumps, leaps, and lands\n```\n\nNot bad. Here's another sample.\n\n```\n[Sample AI Response]\nParkour through the cosmos\njump to the moon and land with a moonwalk\npush off from the Earth, do a headspin\njump to Mars, make it look easy\n```\n\nI'm impressed that instead of just shoe-horning in the parkour theme, it's found words and phrases that have a natural connection with the space theme ‚Äî like 'leap' and 'moonwalk.'\n\nIt was at this point that the [vector aspect](https://jalammar.github.io/illustrated-gpt2/) of the model started to really click for me.\n\nIt's as if it found the [cross-product](https://en.wikipedia.org/wiki/Cross_product) between the 'space' vector and the 'parkour' vector (this is a gross over-simplification), and applied that to the poem.\n\n### ‚úç Children's Story (Rhyming Verse)\n\nMy next task was to try something a bit more directed. This time I will give it a concrete example (with a tone, structure and story) to continue with.\n\nTo keep it (relatively) easy for the AI, I started with a rhyming verse, like something from a Dr Seuss book:\n\n```\n[Prompt]\nIt's a sunny day.\nAnd Milky wants to play!\nHe looks for his ball,\nbut it's not in the hall.\n```\n\n> By the way Milky's the name of my dog, and this literally is the story of his life every morning.\n\nSome of the results from this were super interesting. My favorite one is:\n\n```\n[Sample AI Response]\nIt's not on the stairs.\nIt's not in the yard.\nMaybe it's in the attic,\nsomewhere really dark.\n```\n\nThis one nails the tone ‚Äî notice that it repeats the \"It's not at \\_\\_\\_\" three times? That's just like what a children's book would do!\n\nIt also introduces some progression and drama into the story. Now our character has an idea where the ball is (the attic), but there is a sense of danger and risk in the way (somewhere really dark).\n\nStructurally, \"yard\" and \"dark\" is also partial rhyme, but I think that was probably a fluke (out of the 20 samples, maybe only 2-3 managed to rhyme).\n\nStill, I was really impressed with this result. Here's something else that I observed as well:\n\n```\n[Sample AI Response]\nThen in through the window\nstumbles a dog with a bark.\nIt's Billy, his brother.\n```\n\n_Dog!_ It figured out that Milky in this story is a dog, even though that was never explicitly mentioned in the prompt. It might be a small detail, but I was low-key amazed by that.\n\n### ‚úç Fantasy Fiction\n\nNext let's test GPT-3's ability for creative story-telling as well. Here's a rhyming story with a bit of drama, written in a high-fantasy style:\n\n```\n[Prompt]\nA mysterious curse sweeps the land,\nand into townsfolk's hearts expand.\nOne broken link and night shall fall,\neternal sleep will enslave them all.\n\nBut there is hope\n```\n\nI ended the prompt with `But there is hope` because I was interested to see if the AI can progress (and negate!) the verse before it, rather than extend the example (which we already know it can do).\n\nThe results for this prompt were probably the most entertaining for me to read. My favorite:\n\n```\n[Sample AI Response]\na prophecy is spoken,\nWhich tells of one who will restore the sun.\nShe comes with a prince and shall break the spell,\nand together save the land from hell.\n```\n\nSo many things I love about this response.\n\n- It introduces a _heroine_ to the story (+1 for gender diversity!)\n- It writes a sensible continuation of the prompt.\n- It even manages rhyming (between 'one/sun', and 'spell/hell').\n\nA lot of the other samples were also quite interesting (check them out [here](https://github.com/pixegami/gpt-3-poetry-results)) and full of creative ideas.\n\n### ‚úç Hacker Rap\n\nAnd finally just for a bit of fun, let's see what it can do with hacker rap ü§£ :\n\n```\n[Prompt]\nWhen I'm tappin' I'm trapped in the screen\nI escape when the codebase is clean\n```\n\nI loved it's work here as well. It did a good job picking up on both structure (rhyme) and content.\n\n```\n[Sample AI Response]\nI can write code, I can code all night\nYou are my code and I am your light\nWe're in this together from dusk 'til dawn.\nWe got the skill to make things run\n```\n\nI also found this particular choice of words interesting:\n\n```\nThe refactoring was a success, great!\nAnd I will not commit the same crime\nSo I'm testin', testin', testin, testin' again\nJust when I've seen enough, it happens again\n```\n\n\"Commit the same crime\" ‚Äî does it know the significance of the word _commit_ for developers? ü§Ø\n\n## Wrap Up\n\nThat's pretty much all I had to share this time around. GPT-3 has definitely impressed me with it's capabilities, and now I have a stronger understanding how this power can be wielded.\n\nIn a batch of 20 samples, not all of them are great‚Äîbut the good ones are sometimes _really_ good.\n\nIf I wanted to use it in this way, I'd need a process that allows a human (me) to select and use the best samples.\n\nI hope this was interesting! I also covered everything here in a video as well (which I geared towards less technical viewers) which you can check out [here](https://www.youtube.com/watch?v=r3zKcL0iGeA&t=47s).\n\nThanks for reading!\n","tags":"[backend]","selected":"true"},{"id":6,"title":"Building a serverless SaaS product","author":"No Author Given","date":"12-07-2023","content":"\nThe [SaaS (software as a service)](https://en.wikipedia.org/wiki/Software_as_a_service) model underpins many of today's successful new businesses. Knowing how to build one from start to finish is probably a useful addition to any software developer's skill set.\n\nBut even when you strip a SaaS product of its business logic, there's still a non-trivial amount of work and trade-offs to consider.\n\nIn this project, my goal was to build a fully serverless SaaS web-app with authentication and payments ‚Äî the two vital organs of any business.\n\nMy implementation is opinionated (as you'll see), and intended to serve as a starting point for new SaaS ideas in the future. Here's what's included:\n\n- [Authentication](#authentication)\n- [Payments (Stripe)](#payments-stripe)\n- [Frontend (React)](#frontend-react)\n- [Backend API](#backend-api)\n- [Serverless architecture](#serverless-architecture)\n- [Infrastructure as code](#infrastructure-as-code)\n- [CRUD operations](#crud-operations)\n- [Lessons Learnt](#lessons-learnt)\n\nYou can view the example at https://saas-starter-stack.com/app/ and the source on [GitHub](https://github.com/pixegami/saas-starter). In this post, I'll be reflecting on my choices and experience for each of the above features.\n\n### Authentication\n\n**Don't roll your own auth!** It's hard, and mistakes can be devastating to a business. With that said, I did it anyway ‚Äî mostly to learn from it. Here's also some [discussion on Hackernews](https://news.ycombinator.com/item?id=22001918) on why you might want to build your own auth.\n\nI used [bcrypt](https://codahale.com/how-to-safely-store-a-password/) and [JSON Web Tokens](https://jwt.io/), and stored credentials on DynamoDB. That part wasn't so bad. The real grind came from building things like exponential back-offs for failed attempts, account verification and reset mechanisms, and patching all the security edge cases.\n\nI got it to a roughly working state, and then called it a day. If this was a production system, I'd probably look into something like [Cognito](https://aws.amazon.com/cognito/), [Firebase](https://firebase.google.com/products/auth) or [Okta](https://www.okta.com/).\n\n### Payments (Stripe)\n\nFrom payments integration, [Stripe](https://stripe.com) was an easy choice. No prominent alternative come to mind, and I've heard high praises about Stripe's developer onboarding experience.\n\nI set up [subscription payment](https://stripe.com/en-au/billing) integration with the project, and I think the developer experience lives up to expectations. The tutorials were well structured and concise.\n\nBut the little thing that impressed me the most was when I typed in 'test card' in a [search box](https://stripe.com/docs/testing), it actually just straight up gave me a card-number I could copy straight to my clipboard. Whoever thought of that just saved me a click, and I'm grateful.\n\n### Frontend (React)\n\nThe frontend is a responsive web-app build with [React](https://reactjs.org/). It seems like React is still the dominant technology is the area, although I've yet to try its main competitors like [Vue](https://vuejs.org/) or [Svelte](https://svelte.dev/).\n\nI used [TailWindCSS](https://tailwindcss.com/) for styling, and prefer to anything I've tried in the past (Boostrap CSS, Semantic UI and just vanilla CSS).\n\nI then used [Gatsby](https://www.gatsbyjs.com/) to optimize the static site rendering ‚Äî but I'm not sure if the extra steps are worth it at this stage. It's better for SEO and performance, but costs extra development cycles.\n\nOverall though, I was quite satisfied with this stack for the frontend, and would be happy to use it for production.\n\n### Backend API\n\nThe backend is a serverless REST API implemented in Python and hosted as [Lambda functions](https://aws.amazon.com/lambda/) behind API Gateway.\n\nMy main challenge here was to abstract away the lower level things (like CORS, HTTP response formatting, database access) as much as possible. I did this via [Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), which allowed me to group a bunch of Python packages and common scripts together.\n\nThis allowed me to implement handlers that are quite short and readable, which is think is key to maintainability.\n\n### Serverless architecture\n\nWhy serverless? I think for a lot of businesses it simply wins out from a cost and scaling perspective. I could probably serve north of 500k API requests for [less than a dollar](https://aws.amazon.com/lambda/pricing/).\n\nHowever, this implies that the choice of database must be serverless as well. I chose [DynamoDB](https://aws.amazon.com/dynamodb/) just for the ease of integration. But if I had different data modeling requires (for which the DynamoDB architecture might be unfit), I might look into [Aurora](https://aws.amazon.com/rds/aurora/) or [Fauna](https://fauna.com/).\n\n### Infrastructure as code\n\nConfiguring infrastructure is time-consuming and error prone. If I want to be able to deploy a copy of this service quickly, I'd have to [model it as code (IaC)](https://en.wikipedia.org/wiki/Infrastructure_as_code). In keeping theme with my AWS integration so far, I've modeled this project with [AWS CDK](https://docs.aws.amazon.com/cdk/latest/guide/home.html) in Typescript.\n\nWith this the entire frontend and backend can be deployed to a brand new account or domain in less than 30 minutes with just a [few configuration changes](https://github.com/pixegami/saas-starter/blob/master/saas-infrastructure/service.config.json).\n\n### CRUD operations\n\nFinally, I've added some simple Twitter-like posting capabilities to the project just as a stub for the actual business logic. It has ways to interact with the authentication API, and find out whether a user is verified, and if they are a paying subscriber.\n\n## Closing Thoughts\n\nHonestly, I'm so tired of this project already. It was a lot more complex than I expected ‚Äî especially for an app that really doesn't do _anything_! But I did learn a lot along the way though, and will probably be faster the second time around.\n\nMy top three takeaways are:\n\n- Don't build your own auth.\n- You'll probably rebuild the project at least once or twice, so design things to be flexible.\n- Having integration tests really paid off.\n","tags":"[sass,css]","selected":"true"},{"id":7,"title":"Hello All!","author":"Benjamin Zhang","date":"30-07-2023","content":"\r\n# I like React!\r\n\r\n_I love coding with React._\r\n","tags":"[html,css]","selected":"true"}]