[{"id":1,"title":"Getting Started with AWS","author":"No Author Given","date":"27-07-2023","tags":"[react,frontend,nodejs]","content":"\n\"Cloud computing\" plays a vital role in the creation of software products and services. It's also one of the most highly sought-after skills in the tech industry.\n\nIn fact, most of the projects on this site will require cloud interaction of some sort‚Äîparticularly with AWS's serverless products.\n\n## Getting Started\n\n> To use AWS in these projects, we'll need to set up an account, the CLI, and the SDK.\n\n### Create an account\n\nIf you don't already have an account then [sign up here](https://portal.aws.amazon.com/billing/signup#/start).\n\nOnce you are signed up, you should be able to log in to the [AWS Console](https://aws.amazon.com/console/). It might look overwhelming if you're seeing for the first time.\n\n### Install the CLI\n\nThe AWS CLI is a command-line application that lets you interact with your AWS account from the terminal. It's available on all platforms.\n\nIf you are a proficient Python user, you can just install it with `pip`.\n\n```bash\npip install awscli\n```\n\nOtherwise, check out the [official instructions](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html).\n\nOnce installed, you should be able to run this command from the terminal to see its version.\n\n```bash\naws --version\n```\n\n### Create an IAM user\n\nThe CLI will access your AWS account via an \"IAM user.\" You can create one from the **Users** page in your [IAM console](https://console.aws.amazon.com/iam).\n\nOnce the user is created, you'll need to generate access keys (passwords, essentially) for it.\n\n- [Creating an Admin IAM User](https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html)\n- [Creating access keys for a user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey)\n\nYour access keys should look something like this:\n\n```\nAccess key ID: AKIAIOSFODNN7EXAMPLE\nSecret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\n### Configure the CLI\n\nNext you need to [configure the CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html) so that it can access your AWS account via the IAM user.\n\nBasically, just run this command and paste in your access keys.\n\n```bash\naws configure\n```\n\nAdditionally, you'll also be asked for a [default region](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-region) and [default output format](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-format).\n\nYou may leave them empty‚Äîbut generally I like to use:\n\n```\nDefault region name [None]: us-east-1\nDefault output format [None]: json\n```\n\n### Configuration files\n\nOnce configured, the AWS CLI [saves the credentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html) and region/format profiles to your computer. They are typically in these locations:\n\n```\n~/.aws/credentials\n~/.aws/config\n```\n\nYou can open them up and edit them if you like or just run `aws configure` again to change them.\n\n### Test the CLI!\n\nNow you should be able to use your CLI to access AWS. For example, I should be able to see the S3 buckets I have in `us-east-1`:\n\n```bash\naws s3 ls\n\n2020-12-09 22:36:32 blog.pixegami.com\n2020-12-27 00:04:52 cloud-archiver.5dac84a54677.archivetest\n```\n\nGenerally, everything that can be done in the console can also be done in the CLI. Check out the [full reference guide here](https://docs.aws.amazon.com/cli/latest/index.html).\n\n### AWS SDK\n\nFinally, to use AWS directly from your application code, you need to download the [SDK](https://aws.amazon.com/tools/) for the language you work with.\n\nThe SDKs can be configured in different ways as well, but by default it usually uses the same profiles and credentials stored by your `aws configure`.\n\n### That's it!\n\nYou're all set to start using AWS.\n\n## Why AWS?\n\nWhen we bring \"the cloud\" into a project, it's usually because there's some capability we'd like to add.\n\n- Hosting for a website or service.\n- File or data storage.\n- On-demand computation.\n- Authentication.\n\nAnd there's many viable solutions to choose from‚Äî[Azure](https://azure.microsoft.com/en-au/), [Google Cloud](https://cloud.google.com), [Firebase](https://firebase.google.com), [Digital Ocean](https://try.digitalocean.com).\n\nSo why could you choose [AWS](https://aws.amazon.com/what-is-aws/) over any of these alternatives? From a new user's perspective:\n\n- **Largest marketshare (at 30%)** which roughly translates to lots of community resources and job opportunities.\n\n- **Most services available (175+)** which means more tools at your disposal, well-integrated under one umbrella.\n\nOn the flip-side, the biggest drawback is its upfront complexity.\n\nPersonally though, the reason I use AWS is because it's the technology I'm most familiar with.\n\n## Why Serverless?\n\n**It's cheaper.** Most cloud \"getting started\" guides will show you how to spin up a server‚Äîa mercenary rented computer that stays online 24/7 to do your bidding.\n\nBut for most of my projects, I'm going utilize technology that doesn't require a hosted server. In particular:\n\n| Service  | Purpose        |\n| -------- | -------------- |\n| S3       | File storage   |\n| DynamoDB | Database       |\n| Lambda   | Compute engine |\n\nTheir on-demand pricing means the cost scales with usage. There is a [free tier](https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc), and it only begins to cost money if usage exceeds a certain amount.\n\nFor small projects with light traffic, this usually translates to monthly costs of **less than a dollar** (if not completely free).\n\nIn comparison, the price of hosting a server typically starts at **$5.00 per month**.\n\n## Continue Learning\n\n- [Official documentation](https://aws.amazon.com/getting-started/)\n- [Free YouTube videos](https://www.youtube.com/watch?v=ubCNZRNjhyo)\n- [Udemy Courses](https://www.udemy.com/course/aws-certified-developer-associate/)\n"},{"id":2,"title":"My First Post, Yo!","author":"No Author Given","date":"28-07-2023","tags":"[react,css]","content":"\r\n# Welcome to My Blog\r\n\r\n_It's a beautiful thing._\r\n"},{"id":3,"title":"Using AI to generate poetry","author":"No Author Given","date":"25-07-2023","tags":"[backend]","content":"\nI was recently granted access to the [OpenAI GPT-3 Beta](https://beta.openai.com/), a very powerful language model that can be used to do all sorts of magic like chat bot generation, article summary, and a [lot more cool stuff](https://beta.openai.com/examples).\n\nBut the application that really excited me was creative writing (stuff like SEO generation is cool and all, but a also a bit dry for my taste).\n\nI had previously seen [AI Dungeon](https://play.aidungeon.io/) use GPT to create an interactive text adventure game (try it, it's fun!) and that got me curious about what else the AI was capable of ‚Äî especially when elements of both _creativity_ and _structure_ were involved.\n\nI decided to test it against poetry and story generation, and this is the resulting write-up of those experiments.\n\n## What is GPT-3?\n\n[GPT-3](https://arxiv.org/abs/2005.14165) is a language model developed by [OpenAI](https://beta.openai.com/). To the average developer (like me), it's basically a magical black-box that is extremely powerful at natural language use-cases.\n\nIt was trained on an estimated **45 TB** of text data (pretty much anything that is publicly available on the internet)!\n\nWe can literally ask it to do anything. For example, if I ask for steps to bake a cake it gives me:\n\n```\n1. Preheat oven to 350¬∞F.\n2. Grease and flour a 9-inch round cake pan.\n3. Stir cake mix, oil, eggs, and water in a large bowl with a spoon until blended.\n4. Pour batter into prepared pan.\n```\n\nAlternatively, I can provide it with an example of what I want. Such as:\n\n```\n[15 mins] Walk or jog lightlyy to warm up.\n[10 mins] 3 sets of Squats\n```\n\nAnd it will understand that we're writing a work-out routine, and continue in that style ‚Äî responding with something like this:\n\n```\n[10 mins] 3 sets of Push ups (use the bench/steps if you can't do regular ones)\n[10 mins] 3 sets of Lunges\n[10 mins] 3 sets of Sit ups\n[10 mins] 3 sets of Tricep dips\n[10 mins] 3 sets of\n```\n\nIt can also do some pretty zany stuff, like translating from English to emoji.\n\n```\nI love pizza and beer.\nüòÄ‚ù§Ô∏èüçïüç∫\n\nI flew to Japan and ate some Sushi.\n‚úàÔ∏èüáØüáµüòã üç£\n\nI was snowboarding in France.\nüèÇ‚ùÑÔ∏èüá´üá∑\n```\n\nSo as you can see, there's just endless amount of ways you can interact with the AI.\n\nIt's up to us to experiment with it and see how it can be useful for any particular problem. Let's give it a go!\n\n## üí° Method\n\nToday, I want to see if this AI is able to understand and generate poetry. Why poetry? Because I think it's a relatively simple example, and has three distinct dimensions that we can easily assess it on:\n\n- Tone\n- Content\n- Structure\n\nOpenAI lets customers interact with GPT-3 via an API, so that's how I'll be using it as well.\n\nI'll be providing both direct requests and examples (with increasing complexity), and let the AI come up with **20 responses** for each prompt.\n\nAdditionally, for my example prompts, I'll avoid using existing text‚Äîthe AI may have already seen it in the training data and that might skew the results.\n\nI'll then talk about the best samples in each batch and anything I find interesting about them.\n\nAlso I've pushed the [full set of results on GitHub](https://github.com/pixegami/gpt-3-poetry-results) if you wanted to check out the rest of the samples.\n\n## üß™ Results\n\n### ‚úç Short poem\n\nAs a baseline, I want to know how much the AI understands about the tone, structure and content of a 'poem.'\n\n```\n[Prompt]\nWrite a short poem.\n\n[Sample AI Response]\nSnow is falling,\n\nsilently,\n\nthe ground a white blanket.\nHeroes dream in peace,\nwhere they sleep.\n```\n\nIt's a pretty good start! It's structured but it doesn't rhyme. The language and story also have a 'poetic' feel to it. Not bad.\n\nAmongst the other 20 samples were also hilarious rubbish like this one ü§° :\n\n```\n[Sample AI Response]\nLife is like a beach\nWhere we take our coconut and whack it\nor chew on it\n\nThere are also other beaches\nWhere we can drink some sand and ruminate\n```\n\nNot quite hitting the mark, but still pretty interesting.\n\n### ‚úç Short poem with theme\n\nNext, I wanted to extend the prompt with some theme, just to see how it is able to assimilate that into its response.\n\nI picked a theme that isn't typically associated with poetry: **Space Exploration** (also because I've been watching a lot of old-school sci-fi stuff recently).\n\n```\n[Prompt]\nWrite a short poem about space exploration.\n\n[Sample AI Response]\nI hope the stars align\nFor I dream and explore\nBeyond what we see,\nWith the most amazing views\n```\n\nIt's definitely found a way to put the space theme in there ‚Äî not too unnaturally either, because it still links it to 'emotional' concepts like 'dream', 'hope' and 'explore.'\n\n### ‚úç Short poem with 2x themes\n\nNow I know it can handle one theme, let's add another one to the mix and see what happens. Something _not_ commonly associated with either poetry nor space (we want to challenge the AI right?) ‚Äî how about...\n\n```\n[Prompt]\nWrite a short poem about space exploration and parkour.\n\n[Sample AI Response]\nTaking the stars and reaching for the moon\nAfraid to look down\nShe jumps, leaps, and lands\n```\n\nNot bad. Here's another sample.\n\n```\n[Sample AI Response]\nParkour through the cosmos\njump to the moon and land with a moonwalk\npush off from the Earth, do a headspin\njump to Mars, make it look easy\n```\n\nI'm impressed that instead of just shoe-horning in the parkour theme, it's found words and phrases that have a natural connection with the space theme ‚Äî like 'leap' and 'moonwalk.'\n\nIt was at this point that the [vector aspect](https://jalammar.github.io/illustrated-gpt2/) of the model started to really click for me.\n\nIt's as if it found the [cross-product](https://en.wikipedia.org/wiki/Cross_product) between the 'space' vector and the 'parkour' vector (this is a gross over-simplification), and applied that to the poem.\n\n### ‚úç Children's Story (Rhyming Verse)\n\nMy next task was to try something a bit more directed. This time I will give it a concrete example (with a tone, structure and story) to continue with.\n\nTo keep it (relatively) easy for the AI, I started with a rhyming verse, like something from a Dr Seuss book:\n\n```\n[Prompt]\nIt's a sunny day.\nAnd Milky wants to play!\nHe looks for his ball,\nbut it's not in the hall.\n```\n\n> By the way Milky's the name of my dog, and this literally is the story of his life every morning.\n\nSome of the results from this were super interesting. My favorite one is:\n\n```\n[Sample AI Response]\nIt's not on the stairs.\nIt's not in the yard.\nMaybe it's in the attic,\nsomewhere really dark.\n```\n\nThis one nails the tone ‚Äî notice that it repeats the \"It's not at \\_\\_\\_\" three times? That's just like what a children's book would do!\n\nIt also introduces some progression and drama into the story. Now our character has an idea where the ball is (the attic), but there is a sense of danger and risk in the way (somewhere really dark).\n\nStructurally, \"yard\" and \"dark\" is also partial rhyme, but I think that was probably a fluke (out of the 20 samples, maybe only 2-3 managed to rhyme).\n\nStill, I was really impressed with this result. Here's something else that I observed as well:\n\n```\n[Sample AI Response]\nThen in through the window\nstumbles a dog with a bark.\nIt's Billy, his brother.\n```\n\n_Dog!_ It figured out that Milky in this story is a dog, even though that was never explicitly mentioned in the prompt. It might be a small detail, but I was low-key amazed by that.\n\n### ‚úç Fantasy Fiction\n\nNext let's test GPT-3's ability for creative story-telling as well. Here's a rhyming story with a bit of drama, written in a high-fantasy style:\n\n```\n[Prompt]\nA mysterious curse sweeps the land,\nand into townsfolk's hearts expand.\nOne broken link and night shall fall,\neternal sleep will enslave them all.\n\nBut there is hope\n```\n\nI ended the prompt with `But there is hope` because I was interested to see if the AI can progress (and negate!) the verse before it, rather than extend the example (which we already know it can do).\n\nThe results for this prompt were probably the most entertaining for me to read. My favorite:\n\n```\n[Sample AI Response]\na prophecy is spoken,\nWhich tells of one who will restore the sun.\nShe comes with a prince and shall break the spell,\nand together save the land from hell.\n```\n\nSo many things I love about this response.\n\n- It introduces a _heroine_ to the story (+1 for gender diversity!)\n- It writes a sensible continuation of the prompt.\n- It even manages rhyming (between 'one/sun', and 'spell/hell').\n\nA lot of the other samples were also quite interesting (check them out [here](https://github.com/pixegami/gpt-3-poetry-results)) and full of creative ideas.\n\n### ‚úç Hacker Rap\n\nAnd finally just for a bit of fun, let's see what it can do with hacker rap ü§£ :\n\n```\n[Prompt]\nWhen I'm tappin' I'm trapped in the screen\nI escape when the codebase is clean\n```\n\nI loved it's work here as well. It did a good job picking up on both structure (rhyme) and content.\n\n```\n[Sample AI Response]\nI can write code, I can code all night\nYou are my code and I am your light\nWe're in this together from dusk 'til dawn.\nWe got the skill to make things run\n```\n\nI also found this particular choice of words interesting:\n\n```\nThe refactoring was a success, great!\nAnd I will not commit the same crime\nSo I'm testin', testin', testin, testin' again\nJust when I've seen enough, it happens again\n```\n\n\"Commit the same crime\" ‚Äî does it know the significance of the word _commit_ for developers? ü§Ø\n\n## Wrap Up\n\nThat's pretty much all I had to share this time around. GPT-3 has definitely impressed me with it's capabilities, and now I have a stronger understanding how this power can be wielded.\n\nIn a batch of 20 samples, not all of them are great‚Äîbut the good ones are sometimes _really_ good.\n\nIf I wanted to use it in this way, I'd need a process that allows a human (me) to select and use the best samples.\n\nI hope this was interesting! I also covered everything here in a video as well (which I geared towards less technical viewers) which you can check out [here](https://www.youtube.com/watch?v=r3zKcL0iGeA&t=47s).\n\nThanks for reading!\n"},{"id":4,"title":"Building a QR code micro-app","author":"No Author Given","date":"14-06-2023","tags":"[backend,html,http]","content":"\nEver since the pandemic started, I've noticed QR codes creeping into my daily life. Venue check-ins, digital menus at restaurants, and online payments.\n\nI thought it'd be fun to explore the technology a little bit, so I've built a micro web-app that lets you save messages and view them later using a QR code. Sort of a \"Hello World\" QR code project.\n\nIn this post, I'll be sharing how I built this using Python and AWS free tier.\n\nYou can try out the [app itself here](https://qr.pixegami.com/). The [source code](https://github.com/pixegami/qr-code-webapp) is also available on GitHub.\n\n![images/qr-code-demo.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1628899108564/NGWiGc3-w.gif)\n\n## What is a QR Code?\n\nWe've all seen and used them before, but how does a QR code actually work? The first thing to understand is that it is an [internationally standardized specification](https://www.iso.org/obp/ui/#iso:std:iso-iec:18004:ed-3:v1:en):\n\n> This International Standard [...] specifies the QR Code symbology characteristics, data character encoding methods, symbol formats, dimensional characteristics, error correction rules [...]\n\nAs long an image respects these standard, it is a \"QR code\" and can be understood by most smartphone cameras. The image itself also has a kind of anatomy:\n\n![images/qr_code_anatomy.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628900340423/NSYNLARYu.png)\n\nIt is quite interesting, but ultimately these were the three things I cared about:\n\n- We can store up to around 4000 alpha-numeric symbols in a standard sized QR code.\n- QR codes can have a \"URL\" format, which will prompt phones to open it up in a browser when scanned.\n- QR codes have error-correction capabilities, which allow it to remain function even if some parts of it is covered or removed‚Äî_I did not know this!_\n\n## Architecture\n\nI want to make an app that lets me author some arbitrary content (in this case a short text message), have it persisted somewhere, and generate a QR code that loads the content when I scan it with the phone.\n\nSo after breaking these requirements into technical tasks, here is the strategy:\n\n- **Author some arbitrary content**: I'll use a static React front-end to let the user write their message.\n- **Persist the content**: I'll have a serverless API (using AWS Lambda and API Gateway) for the front-end to use. It will receive the message (a string) and put it into database for storage. I'll generate a unique ID and use this as the `tag` for the object.\n- **Generate a QR Code**: I'll first come up with a URL string I want to encode into the QR image (using the `tag` I made above). Then I'll find a Python library that lets me turn this URL string into a QR image. I'll make the image accessible to the user.\n- **Load the content**: Now I'll implement the URL endpoint that the QR code re-directs to. It will probably have the `tag` as a query parameter, so I'll just use that to look up the message in my table and send it back to the page.\n\n### Overall Stack\n\n- **Frontend**: React (Typescript)\n- **Backend**: Python code with AWS Lambda and API Gateway\n- **Database**: DynamoDB\n- **Image Storage**: Amazon S3\n\n## Implementation\n\nMost of the app's 'meaty' logic lives in the [`qr-code-infrastructure/compute/api`](https://github.com/pixegami/qr-code-webapp/tree/main/qr-code-infrastructure/compute/api) folder, as a bunch\nof Python functions.\n\n### Generating a `tag` and a URL\n\nWhen a user sends a message, it generates a random tag using `uuid4` (which I truncated to 12\ncharacters to keep it a bit shorter). A URL to view this message will then be used to create a QR code.\n\n```python\n\n# uuid is a built-in Python library to generate random IDs with, with low chance of collision.\nqr_id = uuid.uuid4().hex[:12]\nqr_tag = f\"qr-{qr_id}\"\n\n# We'll later have to implement this page so that it can load our message with the given tag.\ncontent = f\"https://qr.pixegami.com/view?tag={qr_tag}\"\n```\n\n### Generating the QR code image\n\nOne of the things I really love about Python is how there's a library for everything. I just typed in \"qr code\" into PyPI and found this [library](https://pypi.org/project/qrcode/), which took a minute to install and use.\n\nUsing the `qrcode` library, I create an image. It's a one-liner.\n\n```python\nqr_image = qrcode.make(content)\n```\n\nBut now we need to save this image somewhere. Since this function is running on AWS Lambda, we can't just [save it anywhere](https://aws.amazon.com/lambda/faqs/).\n\n> Each Lambda function receives 500MB of non-persistent disk space in its own /tmp directory.\n\nThis must be saved into `/tmp` folder on Lambda\nsince that is the only folder that is writable (hence why we need to pass down a `path`).\n\n```python\nimage_path = os.path.join(path, f\"{qr_tag}.png\")\nqr_image.save(image_path)\n```\n\n### Showing the QR image to the user\n\nNow in our Lambda runtime we have a `.png` file at `image_path`. We need to find a way to get it to the user. We'll do this by storing the image somewhere permanent, and then generate a URL for that image.\n\nLet's upload it to an [S3 bucket](https://aws.amazon.com/s3/?nc2=h_ql_prod_fs_s3).\n\n```python\nbucket_name = os.environ[\"IMAGE_BUCKET_NAME\"]\nkey = f\"{qr_result.tag}.png\"\ns3client = boto3.client(\"s3\")\ns3client.upload_file(qr_result.image_path, bucket_name, key)\n```\n\nI then create a [pre-signed URL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html) from the bucket so that I can tell the frontend where to load the\nQR code image from.\n\n> All objects by default are private. Only the object owner has permission to access these objects. However, the object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects.\n\nIt expires in `3600` seconds, but that's fine because I don't need the image\nitself to be long lived.\n\n```python\npresigned_url = s3client.generate_presigned_url(\n    \"get_object\",\n    Params={\"Bucket\": bucket_name, \"Key\": key},\n    ExpiresIn=3600,\n)\n```\n\nThis URL is sent back to the front-end for display.\n\n![images/qr-code.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628903696663/uU7ksdnrL.png)\n\n### Persisting the `tag` and the message\n\nFinally I need to write an entry into the [DynamoDB table](https://aws.amazon.com/dynamodb/) so that when a user scans a QR code, we can fetch the message later.\n\nThe only important thing to know about DynamoDB here is that it acts as a simple key-value store, and it is also serverless.\n\n```python\nitem = QrItem()\nitem.pk = qr_result.tag  # This is the UUID we generated above.\nitem.message = message  # This is the message body.\nself.database.put_item(item)\n```\n\n### Scanning the QR image to load the content\n\nOn the front-end, it's simple just a page for this URL we generated earlier `https://qr.pixegami.com/view?tag={qr_tag}` to look up the table value for the item with that `tag`.\n\nI [used](https://github.com/pixegami/qr-code-webapp/blob/main/qr-code-site/src/components/pages/ViewPage.tsx#L19) a [React `useEffect` hook](https://reactjs.org/docs/hooks-effect.html), which lets me make an API call once the page loads.\n\nI have another API on the back-end, which receives this `tag` and looks up the saved message. It then sends it back for the front-end to display.\n\n```python\nserialized_item = self.database.get_item(QrItem(tag))\nitem = QrItem().deserialize(serialized_item)\nmessage = item.message\n```\n\n![images/qr-result.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1628903629263/V2Jg0j8r3.png)\n\n## Wrap Up\n\nThat's pretty much it! Now if I ever need to use QR codes as part of an application in the future I'll just dig this up üòÖ\n\nAnd if you're keen to try this out yourself, feel free to check out the [source](https://github.com/pixegami/qr-code-webapp). It's a small project so you can probably build it out in a few hours (or a few days, if you're new to AWS as well).\n"},{"id":5,"title":"Create retro games with PICO-8","author":"No Author Given","date":"2020-12-19","tags":"[http,html]","content":"\nAfter watching [High Score](https://www.youtube.com/watch?v=B4jopG1wX88) on Netflix, I was suddenly inspired to develop a retro-style game. I think it was a combination of the aesthetics and nostalgia that motivated me.\n\nIt turned out to be a pretty fun experience, and something I'd recommend as a weekend project to any developer. With tools like [PICO-8](https://www.lexaloffle.com/pico-8.php) (a NES-like virtual console), it's really easy to get started ‚Äî even if you're a beginner to programming.\n\nIn this post, I'll be discussing why you should try your hand at retro-game development, and explain some of the technical limitations you'll be facing.\n\n![images/pico-8 demo](/images/jelpi_demo.gif)\n\n## Why you should build a retro game\n\nFor new programmers especially, a retro game project is:\n\n- A great way to learn programming.\n- An excellent addition to your portfolio.\n- An effective way of prototyping new ideas (see [CELESTE](<https://en.wikipedia.org/wiki/Celeste_(video_game)>)).\n\nThe constraints of using \"retro technology\" creates a harsh environment to develop in.\n\nBut at the same time, you won't have to worry about learning a hundred different libraries, monetization funnels, or how to get it running on four different platforms.\n\nEssentially, you get to focus purely on the technical and creative problems of the game itself.\n\n## What is PICO-8?\n\nFrom the [PICO-8](https://www.lexaloffle.com/pico-8.php) official website:\n\n> PICO-8 is a [fantasy console](https://www.lexaloffle.com/pico-8.php?page=faq) for making, sharing and playing tiny games and other computer programs. It _feels_ like a regular console, but runs on Windows / Mac / Linux.\n\nBasically, it's a program that pretends to be a console. It costs $15 to buy. You can use it to both play _and_ create your games. You can, of course, use an external editor (like [VSCode](https://code.visualstudio.com/)) with it as well.\n\nYou write code for it in [Lua](https://www.lua.org/) (if you haven't used that language before, don't worry ‚Äî you'll pick it up in a day). The art and sound can be created directly in the console's editor, to be used in your game.\n\n![images/pico-8-code-editor](/images/pico-8-code-editor.png)\n\nFinally, you can even export them to HTML so your friends (and recruiters?) can check it out from their phone.\n\nI'd say the learning curve from zero to [Pong](https://en.wikipedia.org/wiki/Pong) is just a matter of hours (or days, at most).\n\nThe best way to get started is to follow the [official manual](https://www.lexaloffle.com/pico-8.php?page=manual), or [watch a video](https://www.youtube.com/watch?v=K5RXMuH54iw).\n\n## PICO-8's technical specs\n\nYou only have a palette of `16` colours, your canvas is `128` pixels wide and your whole program needs to fit within `65536` characters. There's almost no framework library to learn ‚Äî aside from a handful of helper functions that would probably fit on a [napkin if written out](https://www.lexaloffle.com/bbs/files/16585/PICO-8_Cheat-Sheet_0-9-2.png).\n\nComparing it to actual retro console specs, it's somewhere between a [NES](https://en.wikipedia.org/wiki/Nintendo_Entertainment_System) and an [Atari](https://en.wikipedia.org/wiki/Atari).\n\n|                    | PICO-8    | Atari     | NES       |\n| ------------------ | --------- | --------- | --------- |\n| **Year**           | 2015      | 1977      | 1985      |\n| **Resolution**     | 128 x 128 | 160 x 192 | 256 x 240 |\n| **Colors**         | 16        | 128       | 52        |\n| **Cartridge Size** | 32 kB     | 4 kB      | 128 kB    |\n\n## Code examples\n\nHere's a couple of snippets of PICO-8 code to give you an idea of what development looks like.\n\n### Game Loop\n\nThe first thing to note is that the game has a special function called `_update()` which is invoked at 30 FPS. This will probably be the main driving force behind your game logic. In this snippet, we create a variable `f`, which increases by `1` each update ‚Äî effectively counting the number of frames since the game loaded.\n\n```lua\n-- this is a global variable\nf = 0\n\n-- this is a special function that pico-8 invokes 30 times per second.\nfunction _update()\n    f += 1\nend\n```\n\n### Rendering a sprite\n\nYou can draw sprites (images) with the pixel art editor directly in the console. In PICO-8, you have 16 colors to choose from.\n\n![images/pico-8-sprite-editor](/images/pico-8-sprite-editor.png)\n\nEach sprite has an ID, which can then be used to render it on the screen at the x and y position you specify. Another special in-built function of PICO-8 is `_draw()`, which also executes at 30 FPS, but is guaranteed to execute after `_update()`.\n\n```lua\nx = 64\ny = 64\n\nfunction _draw()\n  cls(0) -- clear the screen and set it to color 0 (black).\n  spr(1, x, y) -- draw the sprite ID 1 at (x, y)\nend\n```\n\nThis will draw the above sprite (ID 1) at (64, 64) at the centre of the screen.\n\n![images/pico-8-draw-sprite](/images/pico-8-draw-sprite.png)\n\n### Capturing player input\n\nPICO-8 detects user input via the `btn(k)` function, which returns true with the button with ID `k` is being pressed by the player. `k` ranges from 0 to 6 for a single player, and each number represents either the arrow keys, or two arbitrary game-play buttons like the `A` and `B` on a NES controller.\n\n![images/nes_controller](/images/classic_nes_controller.jpg)\n\nAdding this snippet to the rendering one above will allow us to move the character.\n\n```lua\nfunction _update()\n  if btn(0) then x -= 2 end -- move left\n  if btn(1) then x -+ 2 end -- move right\nend\n```\n\n![images/pico-8-movement](/images/pico-8-movement.gif)\n\n## Ideas to get started\n\nSo, if you like the sound of creating your own retro-game from scratch ‚Äî either to pad your CV with an extra project, or just to learn and have fun, head over to [PICO-8](https://www.lexaloffle.com/pico-8.php) to get started! I recommend first just following the [manual](https://www.lexaloffle.com/pico-8.php?page=manual).\n\nOnce you've nailed the basics, here are some classic titles you could try to implement (and possibly extend):\n\n- [Pong](https://en.wikipedia.org/wiki/Pong) (1972)\n- [Space Invaders](https://en.wikipedia.org/wiki/Space_Invaders) (1978)\n- [Pac-Man](https://en.wikipedia.org/wiki/Pac-Man) (1980)\n- [Snake](<https://en.wikipedia.org/wiki/Snake_(video_game_genre)>) (1997)\n\nOr if you're feeling more ambitious, you could even try to implement a [Mario](https://en.wikipedia.org/wiki/Super_Mario_Bros.) clone!\n"},{"id":6,"title":"Building a serverless SaaS product","author":"No Author Given","date":"12-07-2023","tags":"[sass,css]","content":"\nThe [SaaS (software as a service)](https://en.wikipedia.org/wiki/Software_as_a_service) model underpins many of today's successful new businesses. Knowing how to build one from start to finish is probably a useful addition to any software developer's skill set.\n\nBut even when you strip a SaaS product of its business logic, there's still a non-trivial amount of work and trade-offs to consider.\n\nIn this project, my goal was to build a fully serverless SaaS web-app with authentication and payments ‚Äî the two vital organs of any business.\n\nMy implementation is opinionated (as you'll see), and intended to serve as a starting point for new SaaS ideas in the future. Here's what's included:\n\n- [Authentication](#authentication)\n- [Payments (Stripe)](#payments-stripe)\n- [Frontend (React)](#frontend-react)\n- [Backend API](#backend-api)\n- [Serverless architecture](#serverless-architecture)\n- [Infrastructure as code](#infrastructure-as-code)\n- [CRUD operations](#crud-operations)\n- [Lessons Learnt](#lessons-learnt)\n\nYou can view the example at https://saas-starter-stack.com/app/ and the source on [GitHub](https://github.com/pixegami/saas-starter). In this post, I'll be reflecting on my choices and experience for each of the above features.\n\n### Authentication\n\n**Don't roll your own auth!** It's hard, and mistakes can be devastating to a business. With that said, I did it anyway ‚Äî mostly to learn from it. Here's also some [discussion on Hackernews](https://news.ycombinator.com/item?id=22001918) on why you might want to build your own auth.\n\nI used [bcrypt](https://codahale.com/how-to-safely-store-a-password/) and [JSON Web Tokens](https://jwt.io/), and stored credentials on DynamoDB. That part wasn't so bad. The real grind came from building things like exponential back-offs for failed attempts, account verification and reset mechanisms, and patching all the security edge cases.\n\nI got it to a roughly working state, and then called it a day. If this was a production system, I'd probably look into something like [Cognito](https://aws.amazon.com/cognito/), [Firebase](https://firebase.google.com/products/auth) or [Okta](https://www.okta.com/).\n\n### Payments (Stripe)\n\nFrom payments integration, [Stripe](https://stripe.com) was an easy choice. No prominent alternative come to mind, and I've heard high praises about Stripe's developer onboarding experience.\n\nI set up [subscription payment](https://stripe.com/en-au/billing) integration with the project, and I think the developer experience lives up to expectations. The tutorials were well structured and concise.\n\nBut the little thing that impressed me the most was when I typed in 'test card' in a [search box](https://stripe.com/docs/testing), it actually just straight up gave me a card-number I could copy straight to my clipboard. Whoever thought of that just saved me a click, and I'm grateful.\n\n### Frontend (React)\n\nThe frontend is a responsive web-app build with [React](https://reactjs.org/). It seems like React is still the dominant technology is the area, although I've yet to try its main competitors like [Vue](https://vuejs.org/) or [Svelte](https://svelte.dev/).\n\nI used [TailWindCSS](https://tailwindcss.com/) for styling, and prefer to anything I've tried in the past (Boostrap CSS, Semantic UI and just vanilla CSS).\n\nI then used [Gatsby](https://www.gatsbyjs.com/) to optimize the static site rendering ‚Äî but I'm not sure if the extra steps are worth it at this stage. It's better for SEO and performance, but costs extra development cycles.\n\nOverall though, I was quite satisfied with this stack for the frontend, and would be happy to use it for production.\n\n### Backend API\n\nThe backend is a serverless REST API implemented in Python and hosted as [Lambda functions](https://aws.amazon.com/lambda/) behind API Gateway.\n\nMy main challenge here was to abstract away the lower level things (like CORS, HTTP response formatting, database access) as much as possible. I did this via [Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), which allowed me to group a bunch of Python packages and common scripts together.\n\nThis allowed me to implement handlers that are quite short and readable, which is think is key to maintainability.\n\n### Serverless architecture\n\nWhy serverless? I think for a lot of businesses it simply wins out from a cost and scaling perspective. I could probably serve north of 500k API requests for [less than a dollar](https://aws.amazon.com/lambda/pricing/).\n\nHowever, this implies that the choice of database must be serverless as well. I chose [DynamoDB](https://aws.amazon.com/dynamodb/) just for the ease of integration. But if I had different data modeling requires (for which the DynamoDB architecture might be unfit), I might look into [Aurora](https://aws.amazon.com/rds/aurora/) or [Fauna](https://fauna.com/).\n\n### Infrastructure as code\n\nConfiguring infrastructure is time-consuming and error prone. If I want to be able to deploy a copy of this service quickly, I'd have to [model it as code (IaC)](https://en.wikipedia.org/wiki/Infrastructure_as_code). In keeping theme with my AWS integration so far, I've modeled this project with [AWS CDK](https://docs.aws.amazon.com/cdk/latest/guide/home.html) in Typescript.\n\nWith this the entire frontend and backend can be deployed to a brand new account or domain in less than 30 minutes with just a [few configuration changes](https://github.com/pixegami/saas-starter/blob/master/saas-infrastructure/service.config.json).\n\n### CRUD operations\n\nFinally, I've added some simple Twitter-like posting capabilities to the project just as a stub for the actual business logic. It has ways to interact with the authentication API, and find out whether a user is verified, and if they are a paying subscriber.\n\n## Closing Thoughts\n\nHonestly, I'm so tired of this project already. It was a lot more complex than I expected ‚Äî especially for an app that really doesn't do _anything_! But I did learn a lot along the way though, and will probably be faster the second time around.\n\nMy top three takeaways are:\n\n- Don't build your own auth.\n- You'll probably rebuild the project at least once or twice, so design things to be flexible.\n- Having integration tests really paid off.\n"},{"id":7,"title":"Hello All!","author":"Benjamin Zhang","date":"30-07-2023","tags":"[html,css]","content":"\r\n# I like React!\r\n\r\n_I love coding with React._\r\n"},{"id":8,"title":"Wolfhunter","author":"No Author Given","date":"22-07-2023","tags":"[css,sass,javascript]","content":"\nIn a [previous post](./retro-games-with-pico-8) I talked about how making retro 8-bit games is a great way for fledgling developers to learn new things whilst expanding their portfolio.\n\nI recently gave it a go myself, making a small RPG combat game called \"Wolfhunter\".\n\nI spent two weekends on the project, which‚Äîdespite my prior experience in games development‚Äîstill managed to surprise me with some interesting challenges.\n\n[Source (GitHib)](https://github.com/pixegami/wolfhunter) | [Play the Game! (Web, Mobile)](https://pixegami.github.io/wolfhunter/)\n\n![images/wolfhunter_title](/images/wolfhunter_title.png)\n\n## Concept\n\nWolfhunter is an 8-bit RPG where you play as a hunter facing off against a werewolf, in a Pokemon-like combat sequence.\n\nYou have magic spells and single-use items at your disposal, but the wolf is very powerful. The only way to kill it is to weaken it with your attacks, then finish it off with a silver-knife (which you only have one shot at).\n\nIt is made with [PICO-8](https://www.lexaloffle.com/pico-8.php), and can be played directly in your browser [here](https://pixegami.github.io/wolfhunter/).\n\n> The motif and design of the game was based on the word \"Moonshot\", which was the theme of [GitHub's GameOff 2020 game jam](https://github.blog/2020-11-01-github-game-off-2020-theme-announcement/).\n\n## Gameplay\n\n![images/wolfhunter_gameplay](/images/wolfhunter_gameplay.gif)\n\nI set out to make a game loop that felt similar to the combat in [Pokemon Red/Blue](https://en.wikipedia.org/wiki/Pok%C3%A9mon_Red_and_Blue), which was the most popular title on the [original Nintendo Gameboy](https://en.wikipedia.org/wiki/Game_Boy).\n\nThe characters stand opposite each other, and take turns to fight. There's a bunch of other mechanics too, like strengths/weaknesses, status effects, and switching characters. Here's a scene from it:\n\n![images/pokemon_red_fight_scene](/images/pokemon_fight_scene.png)\n\nFor Wolfhunter, I copied the scene layout, the turn based fighting, and the status effects. I didn't have a chance to implement other aspects of Pokemon ‚Äî so instead I doubled down on the mechanics I did implement.\n\n### Core Mechanics\n\nThe units take turns to fight. The game ends when one of the character's HP is reduced to 0.\n\nEach turn, the player has two basic abilities that can be used for free.\n\n| Ability | Effect                         |\n| ------- | ------------------------------ |\n| Attack  | Deal 15 damage.                |\n| Defend  | Blocks 15 damage for one turn. |\n\n### Magic\n\nThe basic abilities were good to establish some baseline gameplay, but not enough to be interesting. I also added '\"magic\", which costs **1 mana** to use (you start with **5 mana**, and cannot cast spells if you run out).\n\n| Spell    | Effect                                                                     |\n| -------- | -------------------------------------------------------------------------- |\n| Fireball | Deals 40 damage. Ignores defence.                                          |\n| Spark    | Deals 12 damage and **blinds** the enemy, causing the next attack to miss. |\n| Heal     | Recovers 35 HP and clears **bleed** effects.                               |\n\nMagic is more powerful than just attacking or defending, but are in limited supply, and designed to _interact/react_ against enemy abilities.\n\n### Items\n\nItems are even more powerful than magic, but only have **1 use** per fight.\n\n| Item         | Effect                                                    |\n| ------------ | --------------------------------------------------------- |\n| Crossbow     | Deals 25% of the enemy's HP as damage.                    |\n| Elixir       | Recover 5 mana.                                           |\n| Silver Knife | Deals 5 damage, but is the only way to kill the werewolf. |\n\n### Enemy\n\nFinally, to tie the gameplay together, the enemy must interact well with the player's abilities, and provide some kind of strategic challenge.\n\n| Ability       | Effect                                                                               |\n| ------------- | ------------------------------------------------------------------------------------ |\n| Ravage        | Deals 8 damage and causes **bleeding**.                                              |\n| Strong Defend | Blocks 20 damage for one turn.                                                       |\n| Dark Flight   | Skips a turn, then deals 64 damage.                                                  |\n| Raging Strike | Deals 18 damage but becomes **vulnerable** after, taking double damage for one turn. |\n\nThese enemy is strong, but the player has ways to mitigate each of its threats. Pretty much the point of the entire game here is figuring out what move to use next.\n\n## Event Sequence\n\nFrom an implementation standpoint, the most important part of the game is the \"event sequence\". This system will control how the game flows, and sets the framework for everything else to follow.\n\nI define an \"event\" as **something atomic that happens in the game**. It usually displays some description to the player, and requires the player to acknowledge. Examples:\n\n- A character uses an ability.\n- Damage is taken.\n- Character is defeated.\n- Turns switched.\n- Status effect is applied.\n\nThis is pretty much the back-bone of a turn-based system. Everything in the game‚Äîfrom the menu selection, to mana consumption, to damage/block resolution‚Äîcan be modelled with events.\n\nAnd in this game, events are always sequential and happening in order. But new events can be added in the middle of the sequence‚Äîfor example if an attack is blocked, we need a \"block\" event to resolve.\n\n![images/linked_list](/images/linked_list.jpg)\n\nThis is pretty much a [linked list](https://en.wikipedia.org/wiki/Linked_list), and that's how I implemented it. The events are the nodes. Additionally, when each event resolves, it can modify the nodes directly ahead of it, or at the tail of the list.\n\n### Sequence\n\nThis is pretty much a linked list implementation. We start it off with an `new_info_event` (display some text to the player) that says \"it's your turn to move.\"\n\nThe `head` of the sequence is the event we are currently processing in the game.\n\n```lua\nfunction new_sequence()\n\n  local first_event = new_info_event(\"it's your turn to move!\")\n  local sequence = {\n    head = first_event,\n    tail = first_event\n  }\n\n  -- move sequence cursor to the next event.\n  sequence.next = function(this)\n    this.head = this.head.next\n  end\n\n  -- add an event to the end of the sequence.\n  sequence.add = function(this, e)\n    this.tail.next = e\n    this.tail = e\n  end\n\n  -- add an event after the head of the sequence.\n  sequence.insert = function(this, e)\n    e:get_tail().next = this.head.next\n    this.head.next = e\n  end\n\n  return sequence\nend\n```\n\n### Damage Event\n\nHere's an example of an event that causes damage to a unit (character). The `action` is an anonymous function that executes _once_, when the event is processed.\n\nThis includes playing sound effects, animations, and actually modifying the HP values. In this case, if at run-time the damage causes a unit to die, then a `new_end_combat_event` is added to the sequence, along with a `new_info_event` to display some informative text to the player.\n\n```lua\nfunction new_damage_event(unit, value)\n\n  local desc = unit.name..\" takes \"..value..\" damage!\"\n  local dmg_event = new_event(\"damage\", desc, true)\n\n  dmg_event.action = function(this)\n    unit.hp -= value\n    unit:animate(new_hit_animation())\n    sfx(3)\n    if unit.hp <= 0 then\n      unit.hp = 0\n      sequence:insert(new_end_combat_event(unit.name))\n      sequence:insert(new_info_event(\"the fight has ended!\"))\n    end\n  end\n\n  return dmg_event\nend\n```\n\n### Sequence Control\n\nIn the `_update()` function of the game, we process the `head` event and show the appropriate information. Special event types, like `menu` will control what UI is shown.\n\nSome events (`auto`) will be processed immediately‚Äîbut most will require interaction from the player to progress.\n\n```lua\n-- update the menu if we are showing one.\nif event.type == \"menu\" then combat_menu:update() end\nif event.type == \"magic\" then magic_menu:update() end\nif event.type == \"items\" then items_menu:update() end\n\n-- each time we press x, the sequence progresses.\nif btnp(5) or event.type == \"auto\" then sequence:next() end\nif btnp(5) and (event.type == \"info\" or event.type == \"damage\") then sfx(1) end\n```\n\n## Items and Magic\n\nI think items and magic are an interesting one. Instead of being their own event types, I think it was a good chance to apply the [decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern).\n\nThat's because items and magic can be thought of as regular abilities‚Äîwrapped with some extra conditions!\n\nNamely‚Äîwe want to wrap the concept of **mana consumption** onto magic, and **single-use** onto items. Aside from those things, they still do anything else an ability can do. So what I'm after here, is a function that can take in an **ability** (an arbitrary event), and turn it into a magic spell, or an item.\n\nConsider we have this 'heal' event. As is, this will recover 35 HP, and doesn't have any other cost or conditions associated with it.\n\n```lua\nfunction new_heal_event(name, unit, value)\n -- restore 35 hp!\nend\n```\n\nNow, I have a decorator function, which accepts an `event`, and adds mana usage to it.\n\n```lua\n-- wrap an event as a spell, so it costs mana to use.\nfunction as_spell(unit, event)\n  local spell_event = new_event(\"auto\", \"\", true)\n  spell_event.action = function(this)\n    if unit.mana > 0 then\n      unit.mana -= 1\n      sequence:insert(event)\n    else\n      sequence:insert(new_event(\"menu\"))\n      sequence:insert(new_info_event(\"you don't have enough mana to cast this spell.\"))\n    end\n  end\n  return spell_event\nend\n```\n\nThis will check if I have **enough mana** to use this event‚Äîand either cast the spell and deplete the mana, or cancel the event and inform me that I don't have enough mana.\n\nNow I can wrap my `heal` event with `as_spell` and turn it into a magic spell!\n\n```lua\nas_spell(unit, new_heal_event(event_id, unit, 35))\n```\n\n## Animation\n\n[PICO-8](https://www.lexaloffle.com/pico-8.php) doesn't really give us an animation framework. We can draw sprites at arbitrary locations and change some colour palettes, but aside from that‚Äîwe're pretty much on our own.\n\nThankfully, in a turn-based RPG, the animations aren't very complex. I have 'units' on two corners of the screen, and they flicker and bounce around a bit when hit.\n\nTo achieve, this, assume we have a `unit` object with some `x` and `y` position‚Äîits absolute position on the screen.\n\n```lua\nfunction draw_unit(unit)\n  local x = 128 - spr_size\n  local y = 0\n\n  -- draw the unit\n  spr(1, x, y)\nend\n```\n\nI can move the unit by changing `x` and `y`, but what if I cancel an animation half way through? I don't want the animation state to be 'baked' into the unit's actual position, because it will be harder for me to reset it.\n\nMy solution was to create an 'animation' object, which keeps an independent frame count `n` and transformation `x, y`, which can be then _applied_ to the unit at render time.\n\n```lua\nfunction new_animation()\n  local animation = {\n    name = \"default\",\n    n = 0,\n    frames_left = 15,\n    x = 0,\n    y = 0,\n    color = 0,\n  }\n}\n```\n\nNow each update, we can also `update()` the animation and apply its transform to the unit. If the animation runs out of frames, it will disappear and things will be back to normal.\n\n```lua\n-- apply unit animation\nif unit.animation then\n    unit.animation:update(x, y)\n    anim_spr_x = x + unit.animation.x\n    anim_spr_y = y + unit.animation.y\n    if unit.animation:has_ended() then unit.animation = nil end\nend\n\n-- draw the unit\nspr(1, anim_spr_x, anim_spr_y)\n```\n\nHowever, we can also just cancel the animation at any time we want, no matter what frame it is on. This gave me a lot of modular control over the animation, but also prevented any part of the animation system having an impact on the logical game state.\n\n## Tools\n\nHere's some of the main tools/software I used for the job.\n\n- [PICO-8](https://www.lexaloffle.com/pico-8.php): Virtual console, and framework to develop and run the game.\n- [VSCode](https://code.visualstudio.com/): Code editor.\n- [Pixaki](https://rizer.co/): iPad pixel art editor to draw and touch up the sprites (which to be honest, I mostly traced from Pokemon).\n\n## Summary\n\nThat pretty much sums up my experience of implementing RPG combat in [PICO-8](https://www.lexaloffle.com/pico-8.php). Even with the lo-fi, 80's era constraints, I found that the core problems‚Äîlike game design and event modelling‚Äîare still timeless.\n\nWith a bit of work, I think it'd be possible to implement a more Pokemon-like RPG in PICO-8, but probably on a smaller scale, because of the memory and size limits (I was almost at 30% capacity with just this).\n\nAt some point though, dealing with over 1,000 lines of code in a single `lua` run-time becomes unwieldy. So whilst something like [Unity](https://unity.com/) is better suited for serious projects, PICO-8 is still a great way to learn and prototype ideas.\n\n> Wolfhunter's [source code](https://github.com/pixegami/wolfhunter) is public, and you can play the game directly in the browser (both web and mobile) [here](https://pixegami.github.io/wolfhunter/).\n"}]