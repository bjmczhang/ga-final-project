[{"id":1,"title":"Build a SaaS AI Platform with Next.js 13, React, Tailwind, Prisma, Stripe","author":"Benjamin Zhang","date":"21-06-2023","tags":"project","content":"\r\n\r\n\r\n> #### What is SaaS?\r\n>\r\n> **SaaS** stands for **Software as a Service**. It is a **cloud computing model** where software applications are delivered over the internet on a subscription basis. Instead of installing and maintaining software on individual devices or servers, users can access and use the software **through a web browser**.\r\n\r\n\r\n\r\n## Environment Setup\r\n\r\n> #### Shadcn/ui\r\n>\r\n> - Re-usable components built using Radix UI and Tailwind CSS.\r\n>\r\n> - **NOT** a component library. It's a collection of re-usable components that you can copy and paste into your apps.\r\n> - It's not a component library, so you do not install it as a dependency. It is not available or distributed via npm.\r\n> - Pick the components you need. Copy and paste the code into your project and customize to your needs. The code is yours.\r\n> - Shadcn/ui components are not in node modules, they are going to be directly in our components folder so we can modify them in any way we want.\r\n\r\n\r\n\r\n##### 1. Create project\r\n\r\n```\r\nnpx create-next-app@latest my-app --typescript --tailwind --eslint\r\n```\r\n\r\n\r\n\r\n##### 2. Run the CLI\r\n\r\n```\r\nnpx shadcn-ui@latest init\r\n```\r\n\r\n> **CLI** stands for **Command Line Interface**. It is a text-based user interface that allows users to interact with a computer program or operating system by entering commands as text. Instead of using a graphical user interface (GUI) with buttons and menus, a CLI requires users to type specific commands in a terminal or command prompt.\r\n\r\n\r\n\r\n##### 3. Install the components\r\n\r\n```\r\nnpx shadcn-ui@latest add button\r\n```\r\n\r\n\r\n\r\n## Folder Setup\r\n\r\n##### 1. Set the height for HTML and body\r\n\r\n```\r\n// globals.css\r\nhtml,\r\nbody,\r\n:root {\r\n  height: 100%;\r\n}\r\n```\r\n\r\n\r\n\r\n##### 2. Change title and description\r\n\r\n```\r\n// layout.tsx\r\nexport const metadata: Metadata = {\r\n  title: \"mAgIc\",\r\n  description: \"AI Platform\",\r\n};\r\n```\r\n\r\n\r\n\r\n##### 3. Router Group\r\n\r\n> In the ==app== directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a **Route Group** to prevent the folder from being included in the route's URL path.\r\n\r\nA route group can be created by wrapping a folder's name in parenthesis: ==(folderName)== \r\n\r\nIt's not affecting the URL, it's just a folder where we decided to keep our root page for easier structure.\r\n\r\n![Organizing Routes with Route Groups](https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Froute-group-organisation.png&w=3840&q=75&dpl=dpl_7ds9ACTGgmRZXVhFUCG5vMyVUFKb)\r\n\r\n![image-20230805170517413](C:\\Users\\benja\\Desktop\\My Projects\\bjm-blog\\public\\assets\\image-20230805170517413.png)\r\n\r\n\r\n\r\n##### 4. Add authentication to our project\r\n\r\n- Shut down our application, so we don't have any hot reloading errors\r\n\r\n- Add authentication using clerk\r\n\r\n  - install @clerk/nextjs\r\n\r\n    ```\r\n    npm install @clerk/nextjs\r\n    ```\r\n\r\n  - set environment keys\r\n\r\n    ```\r\n    // .env.local\r\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=...\r\n    CLERK_SECRET_KEY=...\r\n    ```\r\n\r\n  - mount clerkprovider\r\n\r\n    ```\r\n    // app/layout.tsx\r\n    \t...\r\n    import { ClerkProvider } from '@clerk/nextjs'\r\n    \t...\r\n    return(\r\n    <ClerkProvider>\r\n    \t<html>\r\n            <body>\r\n            ...\r\n            </body>\r\n    \t</html>\r\n    </ClerkProvider>\r\n    )\r\n    ```\r\n\r\n  - create middleware.ts file\r\n\r\n    Now that Clerk is installed and mounted in your application, it’s time to decide which pages are public and which need to hide behind authentication. We do this by creating a ==middleware.ts== file at the root folder (or inside `src/` if that is how you set up your app).\r\n\r\n  - build sign in and sign up pages\r\n\r\n    Clerk offers a set of prebuilt components that you can use to embed sign in, sign up, and other user management functions into your Next.js application. \r\n\r\n    ```\r\n    // app/sign-up/[[...sign-up]]/page.tsx\r\n    import { SignUp } from \"@clerk/nextjs\";\r\n    \r\n    export default function Page() {\r\n      return <SignUp />;\r\n    }\r\n    ```\r\n\r\n    ```\r\n    // app/sign-in/[[...sign-in]]/page.tsx\r\n    import { SignIn } from \"@clerk/nextjs\";\r\n    \r\n    export default function Page() {\r\n      return <SignIn />;\r\n    }\r\n    ```\r\n\r\n    \r\n\r\n"},{"id":2,"title":"Differences Between pt, px, em, rem, percentage, vh, and vw","author":"Benjamin Zhang","date":"22-04-2023","tags":"html,css","content":"\r\n## Physical Pixels of the Device\r\n\r\n### pt:\r\n\r\n- Screen width, resolution, where each unit is 1pt.\r\n\r\n## CSS Pixels\r\n\r\n### px:\r\n\r\n- For desktop screens, 1px is approximately 0.76 physical pixels.\r\n- For small screens like iPhone 6, with a physical resolution of 750 and a resolution of 375, 1px = 2pt.\r\n- px is a relative unit.\r\n- px is used to balance an element's size between PC and mobile devices to be consistent.\r\n- On mobile devices, due to varying screen sizes, it is not desired to have elements displayed at the same size on all devices. Instead, automatic scaling based on screen size is preferred. Therefore, px is less used in mobile development.\r\n- On PC, px units are more commonly used.\r\n- On mobile, rem is preferred over px for responsive design.\r\n\r\n### rem:\r\n\r\n- `rem` is based on the default font size set on the `<html>` element, where 1rem is equal to 16px by default.\r\n- It enables responsive layouts.\r\n- All elements sized in `rem` units change proportionally with the root element's font size.\r\n- By changing the root element's font size, all `rem`-sized elements respond to screen size changes.\r\n\r\n### em:\r\n\r\n- `em` is relative to the font size of the parent element. It is not widely used.\r\n- It can lead to cumulative calculations in nested elements.\r\n\r\n### vm/vh:\r\n\r\n- CSS3 new features.\r\n- `vh`: The viewport height is divided into 100 units, and each unit is 1vh. It changes proportionally with the viewport height.\r\n- `vw`: The viewport width is divided into 100 units, and each unit is 1vw. It changes proportionally with the viewport width.\r\n- vw and vh are essentially percentages.\r\n\r\n### %:\r\n\r\n- Percentages are usually considered relative to the direct parent element, but not always related to the corresponding property value of the parent element.\r\n- For top and bottom properties, percentages are relative to the height of the closest non-static positioned parent element.\r\n- For left and right properties, percentages are relative to the width of the closest non-static positioned parent element.\r\n- For padding and margin, percentages are relative to the parent element's height.\r\n- Due to these variations, percentages are used less in development.\r\n"},{"id":3,"title":"React Hooks and Their Rules","author":"No Author Given","date":"18-06-2023","tags":"react","content":"\r\n\r\n\r\n## What Are React Hooks?\r\n\r\n👉 Special built-in functions that allow us to \"hook\" into React internals:\r\n\r\n- Creating and accessing state from Fiber tree\r\n- Registering side effects in Fiber tree\r\n- Manual DOM selections\r\n- Many more...\r\n\r\n> The Fiber tree is somewhere deep inside React, and usually not accessible to us. But using the useState or the useEffect hook, we can essentially hook into that internal mechanism.\r\n\r\n👉 Always start with \"use\" (useState, useEffect, etc.)\r\n\r\n👉 Enable easy reusing of non-visual logic: We can compose multiple hooks into our own custom hooks\r\n\r\n👉 Give function components the ability to own state and run side effects at different points (before v16.8 only available in class components)\r\n\r\n\r\n\r\n## Overview of All Built-in Hooks\r\n\r\n| MOST USED |     LESS USED |      ONLY FOR LIBRARIES |\r\n| ---- | ---- | ----|\r\n| ✅ useState | ➡️ useRef | ❌ useSyncExternalStore |\r\n| ✅ useEffect | ➡️ useCallback | ❌ useInsertonEffect |\r\n| ➡️ useReducer | ➡️ useMemo |\t\t|\r\n| ➡️ useContext | ➡️ useTransition |\t\t|\r\n|      | ➡️ useDeferredValue |\t\t|\r\n|      | ❌ useLayoutEffect |\t\t|\r\n|      | ❌ useDebugValue |\t\t|\r\n|      | ❌ useImperativeHandle |\t\t|\r\n|      | ❌ useId |\t\t|\r\n\r\n\r\n\r\n## The Rules of Hooks\r\n\r\n#### 1. Only call hooks at the top level\r\n\r\n​\t👉 Do **NOT** call hooks inside **conditionals, loops, nested functions**, or after an **early return**\r\n\r\n​\t👉 This is necessary to ensure that hooks are always called in the **same order** (hooks rely on this)\r\n\r\n#### 2. Only call hooks from React functions\r\n\r\n​\t👉 Only call hooks inside a **function component** or a **custom hook**\r\n\r\n> These rules are automatically enforced by React's ESLint rules\r\n\r\n\r\n\r\n![image-20230804215448826](/assets/image-20230804215448826.png)"},{"id":4,"title":"Hello All!","author":"Benjamin Zhang","date":"30-07-2023","tags":"html,css","content":"\r\n# I like React!\r\n\r\n_I love coding with React._\r\n"},{"id":5,"title":"Summary of JSON Learning","author":"No Author Given","date":"16-06-2023","tags":"json,javascript","content":"\r\n\r\n\r\nJSON stands for JavaScript Object Notation, and it is a data interchange format.\r\n\r\n> Before JSON came along, XML was used to transmit data because it is a text-based format suitable for data exchange over the internet. However, XML became complex when combined with specifications like DTD, XSD, XPath, and XSLT, making it challenging for developers to work with. In 2002, Douglas Crockford, a senior architect at Yahoo, came up with JSON, a super-lightweight data interchange format, to rescue software engineers from the complexities of XML imposed by giant software companies.\r\n\r\nJSON is actually a subset of JavaScript. It supports a few simple data types:\r\n\r\n- ==number==: same as JavaScript's ==number==.\r\n- ==boolean==: equivalent to ==true== or ==false== in JavaScript.\r\n- ==string==: similar to JavaScript's ==string==.\r\n- ==null==: equivalent to ==null== in JavaScript.\r\n- ==array==: same as JavaScript's ==Array==, represented by ==[]==.\r\n- ==object==: similar to JavaScript's =={ ... }==.\r\n\r\nJSON also enforces that character encoding must be UTF-8 and strings must be enclosed in double quotes. Object keys are also required to be enclosed in double quotes.\r\n\r\nJSON quickly gained popularity in the web world and became an ECMA standard. Almost all programming languages have libraries for parsing JSON, and in JavaScript, JSON is natively supported, making it convenient to use.\r\n\r\nTo serialize any JavaScript object into JSON, you need to convert the object into a JSON-formatted string, allowing it to be transmitted over the network. To deserialize a JSON string into a JavaScript object, you simply parse the JSON string.\r\n\r\n### Serialization\r\n\r\nLet's start by serializing the object `xiaoming` into a JSON-formatted string:\r\n\r\n```js\r\n'use strict';\r\n\r\nvar xiaoming = {\r\n    name: '小明',\r\n    age: 14,\r\n    gender: true,\r\n    height: 1.65,\r\n    grade: null,\r\n    'middle-school': '\\\"W3C\\\" Middle School',\r\n    skills: ['JavaScript', 'Java', 'Python', 'Lisp']\r\n};\r\n```\r\n\r\nTo format the output, you can add parameters to control indentation:\r\n\r\n```js\r\nJSON.stringify(xiaoming, null, '  ');\r\n```\r\n\r\nThe result will be:\r\n\r\n```js\r\n{\r\n  \"name\": \"小明\",\r\n  \"age\": 14,\r\n  \"gender\": true,\r\n  \"height\": 1.65,\r\n  \"grade\": null,\r\n  \"middle-school\": \"\\\"W3C\\\" Middle School\",\r\n  \"skills\": [\r\n    \"JavaScript\",\r\n    \"Java\",\r\n    \"Python\",\r\n    \"Lisp\"\r\n  ]\r\n}\r\n```\r\n\r\nYou can also provide an array as the second argument to filter specific properties:\r\n\r\n```js\r\nJSON.stringify(xiaoming, ['name', 'skills'], '  ');\r\n```\r\n\r\nThe result will be:\r\n\r\n```js\r\n{\r\n  \"name\": \"小明\",\r\n  \"skills\": [\r\n    \"JavaScript\",\r\n    \"Java\",\r\n    \"Python\",\r\n    \"Lisp\"\r\n  ]\r\n}\r\n```\r\n\r\nTo have more precise control over the serialization process, you can pass a function as the second argument, which will process each key-value pair in the object:\r\n\r\n```js\r\nfunction convert(key, value) {\r\n    if (typeof value === 'string') {\r\n        return value.toUpperCase();\r\n    }\r\n    return value;\r\n}\r\n\r\nJSON.stringify(xiaoming, convert, '  ');\r\n```\r\n\r\nThe result will be:\r\n\r\n```js\r\n{\r\n  \"name\": \"小明\",\r\n  \"age\": 14,\r\n  \"gender\": true,\r\n  \"height\": 1.65,\r\n  \"grade\": null,\r\n  \"middle-school\": \"\\\"W3C\\\" MIDDLE SCHOOL\",\r\n  \"skills\": [\r\n    \"JAVASCRIPT\",\r\n    \"JAVA\",\r\n    \"PYTHON\",\r\n    \"LISP\"\r\n  ]\r\n}\r\n```\r\n\r\nIf you want to precisely control how `xiaoming` is serialized, you can define a `toJSON()` method on `xiaoming` to directly return the data that should be serialized as JSON:\r\n\r\n```js\r\nvar xiaoming = {\r\n    name: '小明',\r\n    age: 14,\r\n    gender: true,\r\n    height: 1.65,\r\n    grade: null,\r\n    'middle-school': '\\\"W3C\\\" Middle School',\r\n    skills: ['JavaScript', 'Java', 'Python', 'Lisp'],\r\n    toJSON: function () {\r\n        return { // Only output name and age, and change the keys:\r\n            'Name': this.name,\r\n            'Age': this.age\r\n        };\r\n    }\r\n};\r\n\r\nJSON.stringify(xiaoming); // '{\"Name\":\"小明\",\"Age\":14}'\r\n```\r\n\r\n### Deserialization\r\n\r\nTo parse a JSON-formatted string and convert it back to a JavaScript object, you can use `JSON.parse()`:\r\n\r\n```js\r\nJSON.parse('[1,2,3,true]'); // [1, 2, 3, true]\r\nJSON.parse('{\"name\":\"小明\",\"age\":14}'); // Object {name: '小明', age: 14}\r\nJSON.parse('true'); // true\r\nJSON.parse('123.45'); // 123.45\r\n```\r\n\r\n`JSON.parse()` also accepts a function as the second argument, which can be used to transform the parsed properties:\r\n\r\n```js\r\n'use strict';\r\n\r\nvar obj = JSON.parse('{\"name\":\"小明\",\"age\":14}', function (key, value) {\r\n    if (key === 'name') {\r\n        return value + '同学';\r\n    }\r\n    return value;\r\n});\r\nconsole.log(JSON.stringify(obj)); // {name: '小明同学', age: 14}\r\n```\r\n\r\nUsing JSON in JavaScript is that simple!"},{"id":6,"title":"WiFi's Successor - LiFi","author":"No Author Given","date":"4-08-2023","tags":"internet","content":"\r\nIn June this year, the IEEE (Institute of Electrical and Electronics Engineers) approved the 802.11bb standard, which is a communication protocol for **Light Fidelity (LiFi)**. LiFi enables internet access through light, and the \"L\" in LiFi stands for Light.\r\n\r\n![img](/assets/bg2023073105.webp)\r\n\r\nThough there hasn't been much coverage, LiFi is a fascinating technology worth exploring.\r\n\r\nFirstly, let's understand what LiFi is all about.\r\n\r\nAs we know, WiFi uses radio waves to modulate internet signals and transmit data wirelessly. However, instead of using radio waves, LiFi modulates internet signals into light waves, using optical communication for internet access.\r\n\r\nThere are several significant advantages to transmitting wireless signals through light waves:\r\n\r\n### 1. Enormous Bandwidth:\r\n\r\nWiFi operates at frequencies of 2.4 GHz and 5 GHz, possibly extending to 6 GHz. On the other hand, light waves have frequencies ranging from 430 THz to 750 THz, which is orders of magnitude higher than WiFi. Higher frequencies allow for a much larger number of loaded signals and result in an unimaginably high bandwidth. However, higher frequencies also mean weaker penetration through walls.\r\n\r\n### 2. No Radio Interference:\r\n\r\nLiFi can be used in any setting sensitive to radio waves, such as airplanes and operating rooms, as it does not cause radio interference. Additionally, light does not pose any radiation hazards and is harmless to the human body.\r\n\r\n### 3. No Spectrum Resource Limitations:\r\n\r\nUnlike radio waves that require frequency band allocations, light waves have abundant spectrum resources.\r\n\r\n### 4. Low Technical Complexity:\r\n\r\nThe modulation and demodulation of light waves are not technically complex, allowing manufacturers to swiftly produce LiFi products at reasonable costs.\r\n\r\nIt's worth noting that Oppo applied for a LiFi smartphone patent as early as 2020, and there are already dedicated LiFi transmitters for laptops that can be connected via USB.\r\n\r\n![img](/assets/bg2023073108.webp)\r\n\r\nHowever, LiFi also has some challenges that need to be addressed.\r\n\r\nThe most significant issue is that LiFi requires light-emitting bulbs for internet access. This means that when the lights are turned off, there will be no signal.\r\n\r\n![img](/assets/bg2023073109.webp)\r\n\r\nMoreover, the signal receiver needs to be directly facing the light source, and the distance must not exceed a few meters. Some reports suggest a maximum range of 3 meters.\r\n\r\nAdditionally, the question arises on how to handle data upload. Clearly, internet-enabled devices such as smartphones and computers would need to have light bulbs to transmit data.\r\n\r\nConsidering these limitations, LiFi cannot replace WiFi entirely; instead, it serves as a complement and is suitable for specific scenarios that require extremely high bandwidth.\r\n\r\nIn conclusion, the idea of accessing the internet through light bulbs is captivating and almost futuristic. With LiFi now an international standard, we hope to see practical products in the market soon.\r\n"}]